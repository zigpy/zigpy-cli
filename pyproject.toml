[build-system]
requires = ["setuptools>=61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "zigpy-cli"
version = "0.0.0"
description = "Unified command line interface for zigpy radios"
urls = {repository = "https://github.com/zigpy/zigpy-cli"}
authors = [
    {name = "puddly", email = "puddly3@gmail.com"}
]
readme = "README.md"
license = {text = "GPL-3.0"}
requires-python = ">=3.8"
dependencies = [
    "click",
    "coloredlogs",
    "scapy",
    "zigpy>=0.54.0",
    "bellows>=0.35.0",
    "zigpy-deconz>=0.12.0",
    "zigpy-znp>=0.10.0",
    "zigpy-xbee>=0.17.0",
]

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]

[project.optional-dependencies]
testing = [
    "pytest>=7.1.2",
    "pytest-asyncio>=0.19.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.8.2",
    "pytest-cov>=3.0.0",
]

[project.scripts]
zigpy = "zigpy_cli.__main__:cli"


[tool.isort]
profile = "black"
not_skip = "__init__.py"
force_sort_within_sections = true
multi_line_output = 3
length_sort = false
balanced_wrapping = true
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
indent = "    "
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
known_first_party = ["zigpy_cli", "tests"]
forced_separate = "tests"
combine_as_imports = true

[tool.autoflake8]
in-place = true
recursive = false
expand-star-imports = false
exclude = [
    ".venv",
    ".git",
    ".tox",
    "docs",
    "venv",
    "bin",
    "lib",
    "deps",
    "build",
]

[tool.black]
safe = true
quiet = true

[tool.pylint.MAIN]
py-version = "3.8"
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
init-hook = """\
    from pathlib import Path; \
    import sys; \

    from pylint.config import find_default_config_files; \

    sys.path.append( \
        str(Path(next(find_default_config_files())).parent.joinpath('pylint/plugins'))
    ) \
    """
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]
persistent = false
extension-pkg-allow-list = [
    "av.audio.stream",
    "av.stream",
    "ciso8601",
    "orjson",
    "cv2",
]
fail-on = [
    "I",
]

[tool.pylint.CLASSES]
exclude-protected = "_DEVICE_REGISTRY"

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "ip",
    "3321S",
    "3130",
    "3300S",
    "3310S", 
    "3305S",
    "3460L",
    "3157100",
    "mot003V0",
    "mot003V6",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "format",
    "abstract-class-little-used",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "global-statement",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-an-iterable",
    "not-context-manager",
    "redefined-variable-type",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "unnecessary-pass",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 88

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
]
addopts = "--showlocals --verbose"
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(threadName)s %(name)s:%(filename)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"

[tool.mypy]
python_version = 3.8
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
show_error_codes = true
show_error_context = true
error_summary = true

install_types = true
non_interactive = true

disable_error_code = [
    "arg-type",
    "assignment",
    "attr-defined",
    "call-arg",
    "dict-item",
    "index",
    "misc",
    "no-any-return",
    "no-untyped-call",
    "no-untyped-def",
    "override",
    "return-value",
    "union-attr",
    "var-annotated",
]

[tool.coverage.run]
source = ["zigpy_cli"]

[tool.flake8]
exclude = [
    ".venv",
    ".git",
    "docs",
    "venv",
    "bin",
    "lib",
    "deps",
    "build",
]
# To work with Black
max-line-length = 88
# E501: line too long
# W503: Line break occurred before a binary operator
# E203: Whitespace before ':'
# D202 No blank lines allowed after function docstring
ignore = [
    "E501",
    "W503",
    "E203",
    "D202",
]

[tool.pyupgrade]
py37plus = true

[tool.codespell]
ignore-words-list = "hass, dout"
skip = [
    "./.*",
    "test/*",
]
quiet-level = 2

[tool.pydocstyle]
ignore = [
    "D202",
    "D203",
    "D213",
]

[tool.ruff]
target-version = "py38"

select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in `__init__`
    "D202",   # No blank lines allowed after function docstring
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D213",   # Multi-line docstring summary should start at the second line
    "D400",   # First line should end with a period
    "D401",   # First line of docstring should be in imperative mood:
    "D406",   # Section name should end with a newline
    "D407",   # Section name underlining
    "D415",   # First line should end with a period, question mark, or exclamation point
    "E501",   # line too long
              # the rules below this line should be corrected
    "PGH004", # Use specific rule codes when using `noqa`
]

extend-exclude = [
    "tests"
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.ruff.isort]
force-sort-within-sections = true
known-first-party = ["zigpy_cli", "tests"]
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 25
